(실습6) AJAX - XMLHttpRequest 실습
---------------------------------------

=======
(준비작업)
=======
  (1) node.js 설치 - 다운로드사이트(https://nodejs.org/ko/download)에서 운영체제별 LTS(안정화) 버전 다운로드/실행설치
  (2) 네이버 개발자 사이트(https://developers.naver.com)에서 애플리케이션 등록 및 Key 발급
        (2-1) Application > 내 어플리케이션 > 어플리케이션 등록(클릭) > ...다음 내용으로 입력  > 등록하기(클릭)
          애플리케이션 이름:   도서정보검색
          사용 API:  검색
          비로그인 오픈 API 서비스 환경:   WEB 설정
          웹 서비스 URL :   http://127.0.0.1:5500    <-- Live Server 포트번호(5500) 사용됨
       (2-2) 애플리케이션 정보 아래의 Client ID, Client Secret 값 복사
       (2-3) 자바스크립트 프로그램에서 "xhr = new XMLHttpRequest();" 호출 전후로 다음 문장들 사용함
          var word = "고경희 웹";  // 네이버 도서 검색 키워드
          var query = encodeURI(word);  // 키워드(한글)을 웹주소로 인코딩하여 인식할 수 있도록 변환
          let xhr = new XMLHttpRequest();
          xhr.open("GET", `http://localhost:8090/https://openapi.naver.com/v1/search/book.json?query=${query}&display=10&start=1`);   
               // 네이버데이터서버에게 도서검색("고경희"와 "웹" 키워드가 존재하는 도서정보 찾기)을 하여 확보한 도서정보들 중 
               //   10권 분량의 첫번째 페이지를 요청하는 메시지로 설정함
               // 프록시서버(포트:8090)를 사용하여 브라우저의 CORS 보안장벽(Live Server와 네이버데이터서버 간 연계가 보안상 취약요소로 판정됨)을 우회 통과함
          xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest");   // 프록시서버가 요구하는 보안통과용 정보 설정
          xhr.setRequestHeader("X-Naver-Client-Id", "(Client ID)");              // 네이버 데이터 서버가 요구하는 개발자용 어플리케이션 등록 ID
          xhr.setRequestHeader("X-Naver-Client-Secret", "(Client Secret)");    // 네이버 데이터 서버가 요구하는 개발자용 어플리케이션 등록 PW
          xhr.send();

          (*)  예제프로그램 XMLHttpRequest() 코드
                  let xhr = new XMLHttpRequest();
                  xhr.open("GET", "https://jsonplaceholder.typicode.com/users");
                  xhr.send();


  (3) 터미널(윈도우 운영체제의 경우 cmd 혹은 powershell 프로그램)을 실습폴더(lab6)안에서 만들어 다음 명령어로 웹서버용 node.js 모듈("express") 설치
          > npm install --global express
                // 실습폴더안에 node.js 모듈("express") 설치는, (1) 실습폴더(lab6) 안에 서브폴더(node_modules)가 
                //  생성되었으며, (2) 서브폴더 안에 모듈폴더(express)가 존재하면 완료된 것으로 판정함.

  (4) 터미널에서 다음 명령어로 CORS 문제 해결을 위한 2개 프록시 서버용 node.js 모듈("cors", "cors-anywhere") 설치
          > npm install cors cors-anywhere
                // (3)과 같은 방법으로 설치여부 확인함

  (5) VS Code에서 확장모듈("code runner") 설치

  (6) code runner를 사용하는 방식으로 실습폴더에 있는 프록시 서버 프로그램("proxy.js") 편집창에서 마우스 오른쪽버튼을 눌러 팝업메뉴(Run Code)를 실행하거나,
        실습폴더에서 터미널창을 열어 명령어("node proxy.js") 형태로 실행함.


==========
(실습문제 설명)
==========
제공 프로그램들(user-json-AJAX.html, user-json-AJAX.js, css/user-json-AJAX.css)을 참조하여, 완성 프로그램(user-json-AJAX.html)을 실행하였을 때 
브라우저화면이 각각 첨부파일 이미지((실습6) 중간결과(정렬전).png, (실습6) 최종결과(정렬후).png)와 
같이 브라우저에 출력되도록, 제공 프로그램(user-json-AJAX.html, user-json-AJAX.js, css/user-json-AJAX.css)을 
제출 프로그램(book-json-AJAX.html, book-json-AJAX.js, css/book-json-AJAX.css)으로 복사한 다음, 
HTML/CSS/Javascript 기능을 (추가&변경)->(완성)->(제출)하라.

  (*) 최종결과 화면을 보면, 10개 도서 테이블이 <발행일>기준으로 올림차순 정렬되어 있음. 즉, 예제프로그램(user-json-AJAX.js) 안에 기술된 2개 힌트를 참조하여
      응답배열값 안에 있는 10개 객체들을 정렬하는 실행문을 구현하여 정렬한 배열을 display() 함수에 입력전달함.

  (제공폴더(lab6 --> lab6.zip안에 있음) 내 프로그램)  user-json-AJAX.html, user-json-AJAX.js, css/user-json-AJAX.css

  (이미지 파일)
    - (실습6) 중간결과(정렬전).png
    - (실습6) 최종결과(정렬후).png
